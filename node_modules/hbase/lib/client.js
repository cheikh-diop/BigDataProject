// Generated by CoffeeScript 2.0.1
// # Client: server information and object factory

// ## Dependencies
var Client, Connection, Row, Scanner, Table;

Connection = require("./connection");

Table = require("./table");

Row = require("./row");

Scanner = require("./scanner");

// ## Creating a new client

// A new instance of "HBase" may be instantiated with an object containing the
// following properties:   

// * `protocol` (string)   
//   One of 'http' or 'https', default to "http".   
// * `host` (string)   
//   Domain or IP of the HBase Stargate server, optional, default to "localhost".   
// * `port` (string|int)   
//   Port of the HBase REST server, optional, default to "8080".   
// * `krb5` (object)   
//   Configuration object for Kerberos.   
// * `krb5.principal` (string)   
//   Kerberos user principal, required.   
// * `krb5.password` (string)   
//   Kerberos password of the user principal, optional if using a keytab.   
// * `krb5.keytab` (string)   
//   Path to the Kerberos keytab or null if using the default credential cache.   
// * `krb5.service_principal` (string)   
//   GSS service principal in the form of "HTTP@{fqdn}", optional, automatically
//   discovered if "host" is a correct fqdn.
// * `timeout` (int)   
//   Number of milliseconds before the request timeout.

// Other custom options that can be passed to requests. For possible options, take 
// a look at [http](https://nodejs.org/api/http.html#http_http_request_options_callback) 
// or [https](https://nodejs.org/api/https.html#https_https_request_options_callback) request.

// Calling the `hbase` method return an initialized client object.

// ```javascript
// var hbase = require('hbase');
// var client = hbase({ options });
// ```

// You can also manually construct a new instance as follow:

// ```javascript
// var hbase = require('hbase');
// var client = new hbase.Client({ options });
// ```
Client = function(options) {
  var ref;
  if (!options) {
    options = {};
  }
  if (options.protocol == null) {
    options.protocol = 'http';
  }
  if (options.host == null) {
    options.host = '127.0.0.1';
  }
  if (options.port == null) {
    options.port = '8080';
  }
  if (options.krb5 == null) {
    options.krb5 = {};
  }
  if (options.encoding == null) {
    options.encoding = 'utf8';
  }
  if ((ref = options.protocol) !== 'http' && ref !== 'https') {
    throw Error(`Invalid protocol ${JSON.stringify(options.protocol)}`);
  }
  // options.timeout = 60 * 1000  unless options.timeout
  this.options = options;
  this.connection = new Connection(this);
  return this;
};

// ## Query Software Version

// ```javascript
// client.version( function( error, version ){
//   console.log( version );
// } );
// ```

// Will print something similar to:

// ```json
// { "Server": "jetty/6.1.24"
// , "REST": "0.0.2"
// , "OS": "Mac OS X 10.6.4 x86_64"
// , "Jersey": "1.1.5.1"
// , "JVM": "Apple Inc. 1.6.0_20-16.3-b01-279"
// }
// ```
Client.prototype.version = function(callback) {
  return this.connection.get("/version", callback);
};

// ## Query Storage Cluster Version

// ```javascript
// client.version_cluster( function( error, version ){
//   console.log( version );
// } );
// ```

// Will print something similar to:

// ```csv
// '0.89.20100726'
// ```
Client.prototype.version_cluster = function(callback) {
  return this.connection.get("/version/cluster", callback);
};

// ## Query Storage Cluster Status

// ```javascript
// client.status_cluster( function( error, statusCluster ){
//   console.log( statusCluster );
// } );
// ```

// Will print something similar to:

// ```json
// { requests: 0
// , regions: 3
// , averageLoad: 3
// , DeadNodes: [ null ]
// , LiveNodes: [ { Node: [Object] } ]
// }
// ```
Client.prototype.status_cluster = function(callback) {
  return this.connection.get("/status/cluster", callback);
};

// ## List tables

// ```javascript
// client.tables( function( error, tables ){
//   console.log( tables );
// } );
// ```

// Will print something similar to:

// ```json
// [ { name: 'node_hbase' } ]
// ```
Client.prototype.tables = function(callback) {
  return this.connection.get("/", function(err, data) {
    return callback(err, (data && data.table ? data.table : null));
  });
};

Client.prototype.table = function(name) {
  return new Table(this, name);
};

module.exports = Client;
